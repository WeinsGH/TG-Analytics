import streamlit as st
import pandas as pd
import os

# –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
def func(path):
    df = pd.read_csv(path)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 'post_date' –≤ datetime
    if df['date'].dtypes != 'datetime64[ns]':
        df['date'] = pd.to_datetime(df['date'], errors='coerce')

# –ó–∞–º–µ–Ω–∞ nan –≤ 'summary' —Ç–µ–∫—Å—Ç–æ–º –∏–∑ 'text'
    df['summary'] = df.apply(lambda row: row['text'] if pd.isna(row['summary']) else row['summary'], axis=1)

    return df


files = [f for f in os.listdir('ldb/tasks/completed') if os.path.isfile(os.path.join('ldb/tasks/completed', f))]
files.append('data.csv')

selected_database = st.selectbox('–ß—Ç–æ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?', files)
if selected_database != 'data.csv':
    path = f'ldb/SAcompleted/{selected_database}'
else:
    path = 'ldb/data/data.csv'

df = func(path)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
unique_channels = df['chanel'].unique()

# –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
selected_channels = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã", unique_channels)

# –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
selected_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", value=pd.to_datetime('today').date())

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ –∏ –∫–∞–Ω–∞–ª–∞–º
filtered_data = df[(df['date'].dt.date == selected_date) & (df['chanel'].isin(selected_channels))]

col1, col2 = st.columns([4, 1])
with col1:
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ—Å—Ç–æ–≤
    st.write(f'–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(filtered_data)}')
with col2:
    # –ï—Å—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä. –Ø –±—ã–ª –±—ã —Ä–∞–¥ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –æ–Ω, –Ω–æ —ç—Ç–æ –¥–µ–∫–æ—Ä–∞—Ü–∏—è
    joke = st.button('summary')
    if joke:
            st.toast('üî¥ –°–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ –∫–∏—Ä–ø–∏—á.. –ò–ª–∏ –º—ã –±—ã–ª–∏ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º –∏ –∑–∞–±—ã–ª–∏')

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
if not filtered_data.empty:
    for index, row in filtered_data.iterrows():
        st.markdown(f"##### –ö–∞–Ω–∞–ª: {row['chanel']}")
        st.markdown(f"##### [–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç]({row['link']})")
        st.markdown(f"##### –î–∞—Ç–∞ –ø–æ—Å—Ç–∞: {row['date'].strftime('%Y-%m-%d')}")
        st.markdown(f"##### –°–≤–æ–¥–∫–∞: \n{row['summary']}")
        st.markdown(f"###### BS precision: {row['bert_score_precision']}        BS recall: {row['bert_score_recall']}          f1 BS: {row['bert_score_f1']}")
        st.markdown("---")  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
else:
    st.write("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –∫–∞–Ω–∞–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
